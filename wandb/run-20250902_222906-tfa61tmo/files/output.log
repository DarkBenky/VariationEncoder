tfds.core.DatasetInfo(
    name='celeb_a',
    full_name='celeb_a/2.1.0',
    description="""
    CelebFaces Attributes Dataset (CelebA) is a large-scale face attributes dataset
    with more than 200K celebrity images, each with 40 attribute annotations. The
    images in this dataset cover large pose variations and background clutter.
    CelebA has large diversities, large quantities, and rich annotations,
    including - 10,177 number of identities, - 202,599 number of face images, and -
    5 landmark locations, 40 binary attributes annotations per image.

    The dataset can be employed as the training and test sets for the following
    computer vision tasks: face attribute recognition, face detection, and landmark
    (or facial part) localization.

    Note: CelebA dataset may contain potential bias. The fairness indicators
    [example](https://www.tensorflow.org/responsible_ai/fairness_indicators/tutorials/Fairness_Indicators_TFCO_CelebA_Case_Study)
    goes into detail about several considerations to keep in mind while using the
    CelebA dataset.
    """,
    homepage='http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html',
    data_dir='/home/user/tensorflow_datasets/celeb_a/2.1.0',
    file_format=tfrecord,
    download_size=1.39 GiB,
    dataset_size=1.63 GiB,
    features=FeaturesDict({
        'attributes': FeaturesDict({
            '5_o_Clock_Shadow': bool,
            'Arched_Eyebrows': bool,
            'Attractive': bool,
            'Bags_Under_Eyes': bool,
            'Bald': bool,
            'Bangs': bool,
            'Big_Lips': bool,
            'Big_Nose': bool,
            'Black_Hair': bool,
            'Blond_Hair': bool,
            'Blurry': bool,
            'Brown_Hair': bool,
            'Bushy_Eyebrows': bool,
            'Chubby': bool,
            'Double_Chin': bool,
            'Eyeglasses': bool,
            'Goatee': bool,
            'Gray_Hair': bool,
            'Heavy_Makeup': bool,
            'High_Cheekbones': bool,
            'Male': bool,
            'Mouth_Slightly_Open': bool,
            'Mustache': bool,
            'Narrow_Eyes': bool,
            'No_Beard': bool,
            'Oval_Face': bool,
            'Pale_Skin': bool,
            'Pointy_Nose': bool,
            'Receding_Hairline': bool,
            'Rosy_Cheeks': bool,
            'Sideburns': bool,
            'Smiling': bool,
            'Straight_Hair': bool,
            'Wavy_Hair': bool,
            'Wearing_Earrings': bool,
            'Wearing_Hat': bool,
            'Wearing_Lipstick': bool,
            'Wearing_Necklace': bool,
            'Wearing_Necktie': bool,
            'Young': bool,
        }),
        'identity': FeaturesDict({
            'Identity_No': int64,
        }),
        'image': Image(shape=(218, 178, 3), dtype=uint8),
        'landmarks': FeaturesDict({
            'lefteye_x': int64,
            'lefteye_y': int64,
            'leftmouth_x': int64,
            'leftmouth_y': int64,
            'nose_x': int64,
            'nose_y': int64,
            'righteye_x': int64,
            'righteye_y': int64,
            'rightmouth_x': int64,
            'rightmouth_y': int64,
        }),
    }),
    supervised_keys=None,
    disable_shuffling=False,
    nondeterministic_order=False,
    splits={
        'test': <SplitInfo num_examples=19962, num_shards=2>,
        'train': <SplitInfo num_examples=162770, num_shards=16>,
        'validation': <SplitInfo num_examples=19867, num_shards=2>,
    },
    citation="""@inproceedings{conf/iccv/LiuLWT15,
      added-at = {2018-10-09T00:00:00.000+0200},
      author = {Liu, Ziwei and Luo, Ping and Wang, Xiaogang and Tang, Xiaoou},
      biburl = {https://www.bibsonomy.org/bibtex/250e4959be61db325d2f02c1d8cd7bfbb/dblp},
      booktitle = {ICCV},
      crossref = {conf/iccv/2015},
      ee = {http://doi.ieeecomputersociety.org/10.1109/ICCV.2015.425},
      interhash = {3f735aaa11957e73914bbe2ca9d5e702},
      intrahash = {50e4959be61db325d2f02c1d8cd7bfbb},
      isbn = {978-1-4673-8391-2},
      keywords = {dblp},
      pages = {3730-3738},
      publisher = {IEEE Computer Society},
      timestamp = {2018-10-11T11:43:28.000+0200},
      title = {Deep Learning Face Attributes in the Wild.},
      url = {http://dblp.uni-trier.de/db/conf/iccv/iccv2015.html#LiuLWT15},
      year = 2015
    }""",
)
FeaturesDict({
    'attributes': FeaturesDict({
        '5_o_Clock_Shadow': bool,
        'Arched_Eyebrows': bool,
        'Attractive': bool,
        'Bags_Under_Eyes': bool,
        'Bald': bool,
        'Bangs': bool,
        'Big_Lips': bool,
        'Big_Nose': bool,
        'Black_Hair': bool,
        'Blond_Hair': bool,
        'Blurry': bool,
        'Brown_Hair': bool,
        'Bushy_Eyebrows': bool,
        'Chubby': bool,
        'Double_Chin': bool,
        'Eyeglasses': bool,
        'Goatee': bool,
        'Gray_Hair': bool,
        'Heavy_Makeup': bool,
        'High_Cheekbones': bool,
        'Male': bool,
        'Mouth_Slightly_Open': bool,
        'Mustache': bool,
        'Narrow_Eyes': bool,
        'No_Beard': bool,
        'Oval_Face': bool,
        'Pale_Skin': bool,
        'Pointy_Nose': bool,
        'Receding_Hairline': bool,
        'Rosy_Cheeks': bool,
        'Sideburns': bool,
        'Smiling': bool,
        'Straight_Hair': bool,
        'Wavy_Hair': bool,
        'Wearing_Earrings': bool,
        'Wearing_Hat': bool,
        'Wearing_Lipstick': bool,
        'Wearing_Necklace': bool,
        'Wearing_Necktie': bool,
        'Young': bool,
    }),
    'identity': FeaturesDict({
        'Identity_No': int64,
    }),
    'image': Image(shape=(218, 178, 3), dtype=uint8),
    'landmarks': FeaturesDict({
        'lefteye_x': int64,
        'lefteye_y': int64,
        'leftmouth_x': int64,
        'leftmouth_y': int64,
        'nose_x': int64,
        'nose_y': int64,
        'righteye_x': int64,
        'righteye_y': int64,
        'rightmouth_x': int64,
        'rightmouth_y': int64,
    }),
})
Loading existing model weights...
Display - Image shape: (64, 256, 256, 3)
Display - Image min/max: 0.0000 / 1.0000
Loading existing classifier weights...
Loading existing inverse classifier weights...
Starting training with wandb logging...
VAE Epoch 1/25
Step 0, Total: 75700.7500, Recon: 75700.7500, KL: 572.4639
Step 100, Total: 102241.6875, Recon: 102232.3906, KL: 929.6449
Step 200, Total: 87894.4453, Recon: 87874.1953, KL: 1012.5110
Step 300, Total: 87105.1953, Recon: 87074.5000, KL: 1023.1233
Step 400, Total: 98270.4609, Recon: 98233.7031, KL: 918.9109
Step 500, Total: 77357.8828, Recon: 77307.8984, KL: 999.6844
Step 600, Total: 89969.5625, Recon: 89915.5469, KL: 900.2994
Step 700, Total: 101218.8281, Recon: 101157.9844, KL: 869.1724
Step 800, Total: 84849.8906, Recon: 84775.2422, KL: 933.1101
Step 900, Total: 45821.9727, Recon: 45729.9531, KL: 1022.4297
Step 1000, Total: 96281.5156, Recon: 96199.7969, KL: 817.1583
Step 1100, Total: 90143.3594, Recon: 90049.3438, KL: 854.6973
Step 1200, Total: 62875.1992, Recon: 62763.1172, KL: 934.0226
Step 1300, Total: 82704.3047, Recon: 82585.7109, KL: 912.2729
Step 1400, Total: 100208.6641, Recon: 100097.0469, KL: 797.2796
Step 1500, Total: 88759.3047, Recon: 88637.7969, KL: 810.0276
Step 1600, Total: 103470.1406, Recon: 103347.0625, KL: 769.2430
Step 1700, Total: 93665.8516, Recon: 93526.2812, KL: 821.0221
Step 1800, Total: 98526.9297, Recon: 98388.0312, KL: 771.6627
Step 1900, Total: 86138.7031, Recon: 85990.9531, KL: 777.6509
Step 2000, Total: 92665.6484, Recon: 92515.8125, KL: 749.1757
Step 2100, Total: 92425.7188, Recon: 92264.1562, KL: 769.3557
Step 2200, Total: 103627.2031, Recon: 103461.6719, KL: 752.4102
Step 2300, Total: 98044.0703, Recon: 97878.1406, KL: 721.4220
Step 2400, Total: 99826.7500, Recon: 99657.7031, KL: 704.3605
Step 2500, Total: 54593.7070, Recon: 54384.7031, KL: 836.0168
Epoch 1 Average Loss: 86463.0156
VAE Epoch 2/25
Step 0, Total: 88379.0625, Recon: 88183.2500, KL: 769.6947
Step 100, Total: 62387.6758, Recon: 62166.8086, KL: 835.3530
Step 200, Total: 92778.5391, Recon: 92591.0312, KL: 683.3296
Step 300, Total: 78989.0156, Recon: 78773.6094, KL: 757.3975
Step 400, Total: 84574.0469, Recon: 84349.0625, KL: 764.2183
Step 500, Total: 85005.3750, Recon: 84773.5078, KL: 761.7238
Step 600, Total: 92780.3828, Recon: 92552.5547, KL: 724.6510
Step 700, Total: 53250.1602, Recon: 52988.0977, KL: 807.8320
Step 800, Total: 70161.2500, Recon: 69918.3281, KL: 726.4395
Step 900, Total: 96499.1562, Recon: 96260.5859, KL: 692.7047
Step 1000, Total: 89946.4609, Recon: 89684.0781, KL: 740.3525
Traceback (most recent call last):
  File "/home/user/Desktop/VAE/main.py", line 685, in <module>
    train(ds_train, encoder, decoder, epochs=epochs, batch_size=batch_size, latent_dim=latent_dim)
  File "/home/user/Desktop/VAE/main.py", line 241, in train
    loss, recon_loss, kl_loss = train_step(images, global_step)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/util/traceback_utils.py", line 150, in error_handler
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py", line 833, in __call__
    result = self._call(*args, **kwds)
             ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py", line 869, in _call
    return tracing_compilation.call_function(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py", line 139, in call_function
    return function._call_flat(  # pylint: disable=protected-access
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py", line 1322, in _call_flat
    return self._inference_function.call_preflattened(args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py", line 216, in call_preflattened
    flat_outputs = self.call_flat(*args)
                   ^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py", line 251, in call_flat
    outputs = self._bound_context.call_function(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/context.py", line 1688, in call_function
    outputs = execute.execute(
              ^^^^^^^^^^^^^^^^
  File "/home/user/miniconda3/envs/myenv/lib/python3.11/site-packages/tensorflow/python/eager/execute.py", line 53, in quick_execute
    tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
